#include <stdio.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];  // Choose the last element as the pivot
    int i = (low - 1);        // Index of smaller element

    for (int j = low; j <= high - 1; j++) {
        // Check if current element is smaller than the pivot
        if (arr[j] < pivot) {
            i++;    // Increment index of smaller element
            swap(&arr[i], &arr[j]);  // Swap current element with the smaller element
        }
    }
    swap(&arr[i + 1], &arr[high]);  // Swap the pivot with the element at i+1
    return (i + 1);
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        // pi is partitioning index, arr[p] is now at right place
        int pi = partition(arr, low, high);

        // Recursively sort elements before and after partition
        quickSort(arr, low, pi - 1);  // Left subarray
        quickSort(arr, pi + 1, high); // Right subarray
    }
}

int main() {
    printf("Name: Mahmadbnaim Kadivar\n");
    printf("Enrollment no.: 92310103056\n");

    int arr[100], n, i;

    printf("Enter the Length of Array:=> ");
    scanf("%d", &n);

    printf("Enter Elements of Array:\n");
    for (i = 0; i < n; i++) {
        printf("A[%d]= ", i);
        scanf("%d", &arr[i]);
    }

    quickSort(arr, 0, n - 1);  // Sort the entire array

    printf("Sorted Array: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    printf("\n");
    return 0;
}
