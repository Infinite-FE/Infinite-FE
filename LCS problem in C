#include <stdio.h>
#include <string.h>

// Function to implement the LCS problem using dynamic programming
int LCS(char *X, char *Y, int m, int n) {
    int L[m + 1][n + 1]; // Create a 2D array to store lengths of longest common subsequence

    // Build the LCS table in a bottom-up manner
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            if (i == 0 || j == 0) {
                L[i][j] = 0; // If either string is empty
            } else if (X[i - 1] == Y[j - 1]) {
                L[i][j] = L[i - 1][j - 1] + 1; // Characters match
            } else {
                L[i][j] = (L[i - 1][j] > L[i][j - 1]) ? L[i - 1][j] : L[i][j - 1]; // Characters don't match
            }
        }
    }

    // L[m][n] contains the length of LCS for X[0...m-1] and Y[0...n-1]
    return L[m][n];
}

int main() {
    printf("Name: Your Name\n");
    printf("Enrollment no.: Your Roll no.\n");

    char X[100], Y[100];

    // Read the first string
    printf("Enter the first string: ");
    scanf("%s", X);

    // Read the second string
    printf("Enter the second string: ");
    scanf("%s", Y);

    int m = strlen(X);
    int n = strlen(Y);

    // Call the LCS function
    int lcsLength = LCS(X, Y, m, n);

    // Output the result
    printf("Length of Longest Common Subsequence: %d\n", lcsLength);

    return 0;
}
