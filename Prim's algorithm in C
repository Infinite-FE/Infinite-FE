#include <stdio.h>
#include <limits.h>

#define MAX 100

// Function to find the vertex with the minimum key value
int minKey(int key[], int visited[], int vertices) {
    int min = INT_MAX, minIndex;

    for (int v = 0; v < vertices; v++) {
        if (visited[v] == 0 && key[v] < min) {
            min = key[v];
            minIndex = v;
        }
    }
    return minIndex;
}

// Function to implement Prim's algorithm
void primMST(int graph[MAX][MAX], int vertices) {
    int parent[MAX]; // Array to store constructed MST
    int key[MAX];    // Key values used to pick minimum weight edge
    int visited[MAX]; // To represent the set of vertices included in MST

    // Initialize all keys as INFINITE and visited[] as false
    for (int i = 0; i < vertices; i++) {
        key[i] = INT_MAX;
        visited[i] = 0;
    }

    // Always include the first vertex in MST
    key[0] = 0;      // Make the key of the first vertex 0 so that it is picked first
    parent[0] = -1;  // First node is always the root of the MST

    for (int count = 0; count < vertices - 1; count++) {
        // Pick the minimum key vertex from the set of vertices not yet included in MST
        int u = minKey(key, visited, vertices);
        visited[u] = 1; // Add the picked vertex to the MST

        // Update the key value and parent index of the adjacent vertices
        for (int v = 0; v < vertices; v++) {
            // Update key only if graph[u][v] is smaller than key[v]
            if (graph[u][v] && visited[v] == 0 && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    // Print the constructed MST
    printf("Edge\tWeight\n");
    for (int i = 1; i < vertices; i++) {
        printf("%d - %d\t%d\n", parent[i], i, graph[parent[i]][i]);
    }
}

int main() {
    printf("Name: Your Name\n");
    printf("Enrollment no.: Your roll no\n");

    int vertices, edges;

    // Read number of vertices and edges
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    int graph[MAX][MAX];

    // Initialize the graph with 0
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            graph[i][j] = 0;
        }
    }

    // Read edges and weights
    printf("Enter the edges (u, v, weight) where u and v are vertices (0-indexed):\n");
    for (int i = 0; i < edges; i++) {
        int u, v, weight;
        printf("Edge %d: ", i + 1);
        scanf("%d %d %d", &u, &v, &weight);
        graph[u][v] = weight;  // For undirected graph
        graph[v][u] = weight;  // For undirected graph
    }

    // Call Prim's algorithm to find the MST
    primMST(graph, vertices);

    return 0;
}
